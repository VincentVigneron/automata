var searchIndex = {};
searchIndex["automaton"] = {"doc":"Documentation for automaton api","items":[[0,"dfa","automaton","dfa api",null,null],[0,"core","automaton::dfa","dfa core api",null,null],[3,"DFA","automaton::dfa::core","The type `DFA` represents a Deterministic Finite Automaton. The transitions of the automatonn are stored in a hashtable.",null,null],[3,"DFABuilder","","The `DFABuilder` follows the builder pattern and allows to create a Deterministic Finite Automaton. The builder is moved at each call so it is necessary to bind to a new variable the return value for each function of the builder.",null,null],[4,"DFAError","","The `DFAError` type.",null,null],[13,"DuplicatedTransition","","The transition from state `usize` with symbol `char` is defined twice.",0,null],[13,"MissingFinalStates","","No final state is specified.",0,null],[13,"MissingStartingState","","No starting state is specified.",0,null],[6,"Result","","Alias for result::Result<T,DFAError>.",null,null],[8,"DFABuilding","","DFABuilding is the trait assiociated to the DFABuilder type. Each DFABuilder should implement DFABuilding trait.",null,null],[16,"Type","","Type of DFA returned",1,null],[16,"Builder","","Type of the builder used",1,null],[10,"add_start","","Add a starting state to the DFA.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"add_final","","Add a final state to the DFA.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"add_transition","","Add a transition to the DFA.",1,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[10,"finalize","","Finalize the building of the DFA.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new DFABuilder.",3,{"inputs":[],"output":{"name":"result"}}],[11,"add_start","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_final","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_transition","","",3,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"finalize","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_start","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_final","","",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_transition","","",4,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"finalize","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"test","","Test if an input string is a word of the language defined by the DFA.",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reader","automaton::dfa","dfa core reader",null,null],[3,"DFAReader","automaton::dfa::reader","Struct `DFAReader` is an empty structure that builds a `DFA` from a file or from a `&str`.",null,null],[4,"DFAReaderError","","Type `DFAReaderError` describes the list of errors that can occur during the parsing of a DFA file.",null,null],[13,"MissingStartingState","","Error `MissingStartingState` means the file does not contains the starting state.",5,null],[13,"MissingFinalStates","","Error `MissingFinalStates` means the file does not contains the list of final states.",5,null],[13,"IncompleteTransition","","Error `IncompleteTransition` means the transition on the specified line does not contain one of these elements: symbol, source state, destination state.",5,null],[13,"IllformedTransition","","Error `IllformedTransition` means the transition contains to much elements or that the symbole is composed with modre than two characters.",5,null],[13,"DFA","","Error `DFA` encapsules the error specific to the DFA building process (no final states,...).",5,null],[13,"Io","","Error `Io` is relative to the input errors (the file does not exist, the file can not be read,...Ã .",5,null],[13,"Parse","","Error `Parse` is relative to the parsing errors (a state is an intger).",5,null],[6,"Result","","Alias for result::Result<T,DFAReaderError>.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"dfareadererror"}}],[11,"from","","",5,{"inputs":[{"name":"parseinterror"}],"output":{"name":"dfareadererror"}}],[11,"new_from_file","","Reads a DFA from a file.",6,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_from_string","","Reads a DFA from a `&str`.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"nfa","automaton","nfa api",null,null],[0,"core","automaton::nfa","nfa core api",null,null],[3,"NFA","automaton::nfa::core","The type `NFA` represents a NonDeterministic Finite Automaton. The transitions of the automatonn are stored in a hashtable.",null,null],[3,"NFABuilder","","The `NFABuilder` follows the builder pattern and allows to create a Deterministic Finite Automaton. The builder is moved at each call so it is necessary to bind to a new variable the return value for each function of the builder.",null,null],[4,"NFAError","","The `NFAError` type.",null,null],[13,"DuplicatedTransition","","The transition from state `usize` with symbol `char` is defined twice.",7,null],[13,"MissingFinalStates","","No final state is specified.",7,null],[13,"MissingStartingState","","No starting state is specified.",7,null],[6,"Result","","Alias for result::Result<T,NFAError>.",null,null],[8,"NFABuilding","","NFABuilding is the trait assiociated to the NFABuilder type. Each NFABuilder should implement NFABuilding trait.",null,null],[10,"add_start","","Add a starting state to the NFA.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"add_final","","Add a final state to the NFA.",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"add_transition","","Add a transition to the NFA.",8,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[10,"finalize","","Finalize the building of the NFA.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new NFABuilder.",10,{"inputs":[],"output":{"name":"result"}}],[11,"add_start","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_final","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_transition","","",10,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"finalize","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_start","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_final","","",11,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_transition","","",11,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"finalize","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"test","","Test if an input string is a word of the language defined by the NFA.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reader","automaton::nfa","nfa core reader",null,null],[3,"NFAReader","automaton::nfa::reader","Struct `NFAReader` is an empty structure that builds a `NFA` from a file or from a `&str`.",null,null],[4,"NFAReaderError","","Type `NFAReaderError` describes the list of errors that can occur during the parsing of a NFA file.",null,null],[13,"MissingStartingState","","Error `MissingStartingState` means the file does not contains the starting state.",12,null],[13,"MissingFinalStates","","Error `MissingFinalStates` means the file does not contains the list of final states.",12,null],[13,"IncompleteTransition","","Error `IncompleteTransition` means the transition on the specified line does not contain one of these elements: symbol, source state, destination state.",12,null],[13,"IllformedTransition","","Error `IllformedTransition` means the transition contains to much elements or that the symbole is composed with modre than two characters.",12,null],[13,"NFA","","Error `NFA` encapsules the error specific to the NFA building process (no final states,...).",12,null],[13,"Io","","Error `Io` is relative to the input errors (the file does not exist, the file can not be read,...Ã .",12,null],[13,"Parse","","Error `Parse` is relative to the parsing errors (a state is an intger).",12,null],[6,"Result","","Alias for result::Result<T,NFAReaderError>.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",12,{"inputs":[{"name":"error"}],"output":{"name":"nfareadererror"}}],[11,"from","","",12,{"inputs":[{"name":"parseinterror"}],"output":{"name":"nfareadererror"}}],[11,"new_from_file","","Reads a NFA from a file.",13,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_from_string","","Reads a NFA from a `&str`.",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"e_nfa","automaton","e_nfa api",null,null],[0,"core","automaton::e_nfa","e_nfa core api",null,null],[3,"ENFA","automaton::e_nfa::core","The type `ENFA` represents a NonDeterministic Finite Automaton. The transitions of the automatonn are stored in a hashtable.",null,null],[3,"ENFABuilder","","The `ENFABuilder` follows the builder pattern and allows to create a Deterministic Finite Automaton. The builder is moved at each call so it is necessary to bind to a new variable the return value for each function of the builder.",null,null],[4,"ENFAError","","The `ENFAError` type.",null,null],[13,"DuplicatedTransition","","The transition from state `usize` with symbol `char` is defined twice.",14,null],[13,"MissingFinalStates","","No final state is specified.",14,null],[13,"MissingStartingState","","No starting state is specified.",14,null],[6,"Result","","Alias for result::Result<T,ENFAError>.",null,null],[8,"ENFABuilding","","ENFABuilding is the trait assiociated to the ENFABuilder type. Each ENFABuilder should implement ENFABuilding trait.",null,null],[10,"add_start","","Add a starting state to the ENFA.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"add_final","","Add a final state to the ENFA.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"add_transition","","Add a transition to the ENFA.",15,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[10,"add_e_transition","","Add an epsilon transition to the ENFA.",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[10,"finalize","","Finalize the building of the ENFA.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new ENFABuilder.",17,{"inputs":[],"output":{"name":"result"}}],[11,"add_start","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_final","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_transition","","",17,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_e_transition","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"finalize","","",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"add_start","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_final","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_transition","","",18,{"inputs":[{"name":"self"},{"name":"char"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"add_e_transition","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"finalize","","",18,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"test","","Test if an input string is a word of the language defined by the ENFA.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"reader","automaton::e_nfa","e_nfa core reader",null,null],[3,"ENFAReader","automaton::e_nfa::reader","Struct `ENFAReader` is an empty structure that builds a `ENFA` from a file or from a `&str`.",null,null],[4,"ENFAReaderError","","Type `ENFAReaderError` describes the list of errors that can occur during the parsing of a ENFA file.",null,null],[13,"MissingStartingState","","Error `MissingStartingState` means the file does not contains the starting state.",19,null],[13,"MissingFinalStates","","Error `MissingFinalStates` means the file does not contains the list of final states.",19,null],[13,"IncompleteTransition","","Error `IncompleteTransition` means the transition on the specified line does not contain one of these elements: symbol, source state, destination state.",19,null],[13,"IllformedTransition","","Error `IllformedTransition` means the transition contains to much elements or that the symbole is composed with modre than two characters.",19,null],[13,"ENFA","","Error `ENFA` encapsules the error specific to the ENFA building process (no final states,...).",19,null],[13,"Io","","Error `Io` is relative to the input errors (the file does not exist, the file can not be read,...Ã .",19,null],[13,"Parse","","Error `Parse` is relative to the parsing errors (a state is an intger).",19,null],[6,"Result","","Alias for result::Result<T,ENFAReaderError>.",null,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",19,{"inputs":[{"name":"error"}],"output":{"name":"enfareadererror"}}],[11,"from","","",19,{"inputs":[{"name":"parseinterror"}],"output":{"name":"enfareadererror"}}],[11,"new_from_file","","Reads a ENFA from a file.",20,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_from_string","","Reads a ENFA from a `&str`.",20,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[4,"DFAError"],[8,"DFABuilding"],[3,"DFA"],[3,"DFABuilder"],[6,"Result"],[4,"DFAReaderError"],[3,"DFAReader"],[4,"NFAError"],[8,"NFABuilding"],[3,"NFA"],[3,"NFABuilder"],[6,"Result"],[4,"NFAReaderError"],[3,"NFAReader"],[4,"ENFAError"],[8,"ENFABuilding"],[3,"ENFA"],[3,"ENFABuilder"],[6,"Result"],[4,"ENFAReaderError"],[3,"ENFAReader"]]};
initSearch(searchIndex);
